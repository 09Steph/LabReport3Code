 //nano code that actually works/only I2C
#include <Wire.h>
#define I2C_SLAVE_ADDR 0x04 // 4 in hexadecimal
#include <Servo.h>    //include the servo library
#define servoPin 4
Servo myservo;        // create servo object to control a servo
float steeringAngle;  // variable to store the servo position

#define enA 5   //EnableA command line - should be a PWM pin
#define enB 6   //EnableB command line - should be a PWM pin

//name the motor control pins - replace the CHANGEME with your pin number, digital pins do not need the 'D' prefix whereas analogue pins need the 'A' prefix
#define INa A0  //Channel A direction 
#define INb A1  //Channel A direction 
#define INc A2  //Channel B direction 
#define INd A3  //Channel B direction 

  //variables
  int leftMotor_speed = 255;
  int rightMotor_speed = 255;
  int baseSpeed = 255;
  int servoAngle;
  int centreAngle = 85;
  double Kp = 0.5 ;
  double Kd = 0.5;
  double Ki = 0.5;
  double K = 0.5;
  int error = 0;
  double cumulative_error = 0;
  double prev_error = 0;

byte speedSetting = 0;  //initial speed = 0
/*
//Function Prototypes
void goForwards();
void goBackwards();
void stopMotors();
void goClockwise();
void goAntiClockwise();
void receiveEvent(int numBytes);
void motors(int leftSpeed, int rightSpeed);
void moveSteering();
*/
void setup() {
  //initialise serial communication
  Serial.println("Arduino Nano is Running"); //sanity check
  Serial.begin(9600);// open the serial port at 9600 bps:
  Wire.begin(0x04); //Set Arduino up as an I2C slave at address 0x07
  
  myservo.attach(servoPin);  //attach our servo object to pin D4
  //the Servo library takes care of defining the PinMode declaration (libraries/Servo/src/avr/Servo.cpp line 240)

  //configure the motor control pins as outputs
  pinMode(INa, OUTPUT);
  pinMode(INb, OUTPUT);
  pinMode(INc, OUTPUT);
  pinMode(INd, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);   

  //initialise serial communication
  Serial.begin(9600);
  Serial.println("Arduino Nano is Running"); //sanity check

  speedSetting = 255;
  motors(speedSetting, speedSetting); //make a call to the "motors" function and provide it with a value for each of the 2 motors - can be different for each motor - using same value here for expedience
  Serial.print("Motor Speeds: ");
  Serial.println(speedSetting); 
  //to ensure the servo angle left is correct
  myservo.write(0);
  delay(1000);
  myservo.write(80);
  delay(1000);
  myservo.write(180);
  delay(1000);
  myservo.write(80);

  //Wire.onRequest(requestEvent); //Prepare to send data
  Wire.onReceive(receiveEvent); //Prepare to recieve data
  
}

void loop() {
}

void receiveEvent(int numBytes){
  //Set Up Vars
  int receive_int=0;
  int count=0;

  //We'll recieve one byte at a time. Stop when none left
  while(Wire.available())
  {
    char c = Wire.read();    // receive a byte as character
    //Create Int from the Byte Array
    receive_int = c << (8 * count) | receive_int;
    count++;
  }
  //Print the Int out.
  goForwards();
  Serial.print("Received Number: "); 
  Serial.println(receive_int);
  int error = receive_int;
  Serial.print("Error: "); 
  Serial.println(error);
  
  // implement PID control
  error = (int)servoAngle - 90;
  double P = Kp * error;
  cumulative_error += error;
  double I = Ki * cumulative_error;
  double D = Kd * (error - prev_error);
  double PID = P + I + D;
  prev_error = error;

  // adjust servo angle and motor speeds
  servoAngle = 85 + (int)PID;
  leftMotor_speed = baseSpeed + (int)(K * PID);
  rightMotor_speed = baseSpeed - (int)(K * PID);

  // print debug info
  Serial.print("P: "); 
  Serial.println(P);
  Serial.print("I: "); 
  Serial.println(I);
  Serial.print("D: "); 
  Serial.println(D);
  Serial.print("PID: "); 
  Serial.println(PID);
  Serial.print("Servo Angle: "); 
  Serial.println(servoAngle);
  Serial.print("Left Motor Speed: "); 
  Serial.println(leftMotor_speed);
  Serial.print("Right Motor Speed: "); 
  Serial.println(rightMotor_speed);
  /*
  double PID = (Kp*error)+(Ki*cumulative_error)+(Kd*(error-prev_error));
  Serial.print("PID: "); 
  Serial.println(PID);
  //cumulative_error += error;
  //prev_error = error;
  servoAngle = 85 + PID;
  leftMotor_speed = baseSpeed + K*PID;
  rightMotor_speed = baseSpeed - K*PID;
  */
}

void motors(int leftSpeed, int rightSpeed) {
  //set individual motor speed
  //direction is set separately
  analogWrite(enA, leftSpeed);
  analogWrite(enB, rightSpeed);
}

void moveSteering() {
  //you may need to change the maximum and minimum servo angle to have the largest steering motion
  int maxAngle = 180;
  int minAngle = 0;
  myservo.write(0);
  for (steeringAngle = minAngle; steeringAngle <= maxAngle; steeringAngle += 1) { //goes from minAngle to maxAngle (degrees)
    //in steps of 1 degree
    myservo.write(steeringAngle);   //tell servo to go to position in variable 'steeringAngle'
    delay(15);                      //waits 15ms for the servo to reach the position
  }
  for (steeringAngle = maxAngle; steeringAngle >= minAngle; steeringAngle -= 1) { // goes from maxAngle to minAngle (degrees)
    myservo.write(steeringAngle);   //tell servo to go to position in variable 'steeringAngle'
    delay(15);                      //waits 15 ms for the servo to reach the position
  }
}


//for each of the below function, two of the 'IN' variables must be HIGH, and two LOW in order to move the wheels - use a trial and error approach to determine the correct combination for your EEEBot
void goForwards() {
  digitalWrite(INa, HIGH);
  digitalWrite(INb, LOW);
  digitalWrite(INc, HIGH);
  digitalWrite(INd, LOW);
}

void goBackwards() {
  digitalWrite(INa, LOW);
  digitalWrite(INb, HIGH);
  digitalWrite(INc, LOW);
  digitalWrite(INd, HIGH);
}

void goClockwise() {
  digitalWrite(INa, HIGH);
  digitalWrite(INb, LOW);
  digitalWrite(INc, LOW);
  digitalWrite(INd, HIGH);
}

void goAntiClockwise() {
  digitalWrite(INa, LOW);
  digitalWrite(INb, HIGH);
  digitalWrite(INc, HIGH);
  digitalWrite(INd, LOW);
}

void stopMotors() {
  digitalWrite(INa, LOW);
  digitalWrite(INb, LOW);
  digitalWrite(INc, LOW);
  digitalWrite(INd, LOW);
}
